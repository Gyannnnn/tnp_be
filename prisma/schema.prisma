generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  announcements Announcement[]
}

enum Branches {
  CSE
  IT
  CSE_AIML
  PE
  ETC
  ME
  CE
  EE
}

model Student {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  regNo            String       @unique
  email            String       @unique
  password         String
  profileImg       String?
  branch           Branches?
  graduationYear   Int?
  cgpa             Float?
  profileCompleted Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  documents        Document[]   // relation to Document model
  experiences      Experience[]
  applications     Application[]
  notifications    Notification[]

  @@index([branch, graduationYear])
}

enum DocType {
  tenthCertificate
  twelthCertificate
  recentMarksheet
  identityCard
  certification
  other
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  fileUrl    String
  type       DocType?
  fileName   String?
  fileSize   Int?
  mimeType   String?
  isVerified Boolean  @default(false)

  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String   @db.ObjectId

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ExpType {
  certification
  internship
  project
  apprenticeship
}

model Experience {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String   @db.ObjectId
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  type         ExpType
  title        String
  organisation String
  description  String
  startDate    DateTime
  endDate      DateTime
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum JobType {
  FULL_TIME
  INTERNSHIP
}

type JobEligibility {
  branches        Branches[]
  graduationYears Int[]
  minCgpa         Float?
}

enum jobListingStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model JobListing {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  companyId    String           @db.ObjectId
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyName  String
  jobTitle     String
  jobType      JobType
  description  String
  eligibility  JobEligibility
  testLink     String?
  status       jobListingStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications Application[]
  analytics    Analytic[]
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  TEST
  INTERVIEW
  ACCEPTED
  REJECTED
}

model Application {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  student    Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String            @db.ObjectId
  jobListing JobListing        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String            @db.ObjectId
  status     ApplicationStatus
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String   @db.ObjectId
  title     String
  message   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  industry      String
  website       String
  contactPerson String
  contactEmail  String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  JobListing    JobListing[]
}

model Analytic {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  jobListing      JobListing @relation(fields: [jobId], references: [id])
  jobId           String     @db.ObjectId
  totalApplicants Int
  shortlisted     Int
  selected        Int
  rejected        Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum AudienceType {
  ALL
  BRANCH
  BATCH
}

model Announcement {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  audience    AudienceType
  filterData  Json?
  createdBy   String       @db.ObjectId
  admin       Admin        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
